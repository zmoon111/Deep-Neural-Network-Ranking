# imagenet layers definition

[data]
type=data
dataIdx=0

[labels]
type=data
dataIdx=1



# 500 * 500 * 3
# 500 - 32 = 468
#------------first layer--------------
# input : 468 x 468 x 3
[conv1]
type=conv
inputs=data
channels=3
filters=96
padding=1
stride=12
filterSize=12
initW=0.01
sharedBiases=1
partialSum=10
neuron=relu
#
# ceil ( (size + padding * 2 - filterSize)/stride ) + 1 
# ceil ( (468 + 2 - 12)/12 ) + 1 =  40
# output: 40 * 40 * 96

[pool1]
type=pool
pool=max
inputs=conv1
start=0
sizeX=3
stride=2
outputsX=0
channels=96
#
# ceil((size - start - sizeX)/stride) + 1 
# ceil((40 - 0 -  3)/2) + 1
# output: 20 * 20 * 96

[rnorm1]
type=cmrnorm
inputs=pool1
channels=96
size=5
# output: 20 x 20 x 96

#------------second layer--------------
[conv2]
type=conv
inputs=rnorm1
channels=96
filters=128
groups=2
padding=2
stride=1
filterSize=5
neuron=relu
initW=0.01
initB=1
partialSum=10

# (20 + 2*2 - 5)/stride + 1
# output 20 x 20 x 96

[pool2]
type=pool
pool=max
inputs=conv2
start=0
sizeX=3
stride=2
outputsX=0
channels=256

# ceil((20 - 3)/2) + 1 
# output: 10 x 10 x 256

[rnorm2]
type=cmrnorm
inputs=pool2
channels=256
size=5
# output: 10 x 10 x 256

#------------third layer--------------
[conv3]
type=conv
inputs=rnorm2
channels=256
filters=384
padding=1
stride=1
filterSize=3
neuron=relu
initW=0.01
partialSum=10
# ceil( (10 + 2 * 1 - 3)/1) + 1
#output: 10 x 10 x 384

#------------forth layer--------------
[conv4]
type=conv
inputs=conv3
channels=384
groups=2
filters=192
padding=1
stride=1
filterSize=3
neuron=relu
initW=0.01
initB=1
partialSum=10

# ceil( (10 + 2 * 1 - 3)/1) + 1
# 384 = group *  channels
#output: 10 x 10 x 384

#------------fifth layer--------------
[conv5]
type=conv
inputs=conv4
channels=384
groups=2
filters=128
padding=1
stride=1
filterSize=3
neuron=relu
initW=0.01
initB=1
partialSum=10
#output: 10 x 10 x 256

[pool5]
type=pool
pool=max
inputs=conv5
start=0
sizeX=3
stride=2
outputsX=0
channels=256

# output: 5 x 5 x 256


[resize1]
type=resize
inputs=data
channels=3
scale=2
#468/2 = 234
# output = 234 x 234 x 3


[resizeconv1]
type=conv
inputs=resize1
channels=3
filters=96
padding=1
stride=12
filterSize=12
initW=0.01
sharedBiases=1
partialSum=10
neuron=relu
#
# ceil ( (size + padding * 2 - filterSize)/stride ) + 1 
# ceil ( (234 + 2 - 12)/12 ) + 1 =  20
# output: 20 * 20 * 96

[resizepool1]
type=pool
pool=max
inputs=resizeconv1
start=0
sizeX=3
stride=2
outputsX=0
channels=96
#
# ceil((size - start - sizeX)/stride) + 1 
# ceil((20 - 0 -  3)/2) + 1
# output: 10 * 10 * 96

[resizernorm1]
type=cmrnorm
inputs=resizepool1
channels=96
size=5
# output: 10 x 10 x 96

#------------second layer--------------
[resizeconv2]
type=conv
inputs=resizernorm1
channels=96
filters=128
groups=2
padding=2
stride=1
filterSize=5
neuron=relu
initW=0.01
initB=1
partialSum=10

# (10 + 2*2 - 5)/stride + 1
# output 10 x 10 x 96

[resizepool2]
type=pool
pool=max
inputs=resizeconv2
start=0
sizeX=3
stride=2
outputsX=0
channels=256

# ceil((10 - 3)/2) + 1 
# output: 5 x 5 x 256

[resizernorm2]
type=cmrnorm
inputs=resizepool2
channels=256
size=5
# output: 5 x 5 x 256

#------------third layer--------------
[resizeconv3]
type=conv
inputs=resizernorm2
channels=256
filters=384
padding=1
stride=1
filterSize=3
neuron=relu
initW=0.01
partialSum=5
# ceil( (5 + 2 * 1 - 3)/1) + 1
#output: 5 x 5 x 384

#------------forth layer--------------
[resizeconv4]
type=conv
inputs=resizeconv3
channels=384
groups=2
filters=192
padding=1
stride=1
filterSize=3
neuron=relu
initW=0.01
initB=1
partialSum=5

# ceil( (5 + 2 * 1 - 3)/1) + 1
# 384 = group *  channels
#output: 5 x 5 x 384

#------------fifth layer--------------
[resizeconv5]
type=conv
inputs=resizeconv4
channels=384
groups=2
filters=128
padding=1
stride=1
filterSize=3
neuron=relu
initW=0.01
initB=1
partialSum=5
#output: 5 x 5 x 256

[resizepool5]
type=pool
pool=max
inputs=resizeconv5
start=0
sizeX=2
stride=2
outputsX=0
channels=256

# output 3 x 3 x 256



#------------sixth layer--------------
[fc6]
type=fc
outputs=4096
inputs=pool5,resizepool5
initW = 0.01,0.01
initB=1
neuron=relu
dropRate=0.5
# output 4096

#------------seventh layer--------------
[fc7]
type=fc
outputs=4096
inputs=fc6
initW = 0.01
initB=1
neuron=relu
dropRate=0.5
# output 4096

#------------eighth layer----------------
[fc8]
type=fc
outputs=1
inputs=fc7
initW = 0.01

[cross]
type=cost.cross
inputs=fc8,labels
